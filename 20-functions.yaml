# Demonstrates use of Jinja2 filters: default, split, and items2dict in Ansible

- name: functions
  hosts: local
  connection: local
  vars:
    person: "dimitri, petrenko, peter"  # Comma-separated names as a string
  tasks:
    # Task 1: Use 'default' filter to provide a fallback value if 'person' is undefined
    - name: check undefined variable
      ansible.builtin.debug:
        msg: "Hello, {{ person | default('ethan hunt') }}"

    # Task 2: Use 'split' filter to convert the string into a list
    - name: print name
      ansible.builtin.debug:
        msg: "hola, {{ person | split(', ') }}"

    # Task 3: Use 'items2dict' filter to convert a list of key-value maps into a dictionary
    - name: convert map into dict
      vars:
        course:
          - {'key':'name', 'value': 'Ansible Basics'}
          - {'key':'duration', 'value': 120}
          - {'key':'trainer', 'value': 'sk'}
      ansible.builtin.debug:
        msg: "course info: {{ course | items2dict }}"

    - name: conver to uppercase
      vars:
        policy: term
      ansible.builtin.debug:
        msg: "policy: {{ policy | upper }}"

    - name: conver to lowercase
      vars:
        policy: TERM
      ansible.builtin.debug:
        msg: "policy: {{ policy | lower }}"

    - name: ip address validation
      vars:
        ip: "300.342.234.234"
      ansible.builtin.debug:
        msg: "IP address {{ ip |ansible.utils.ipaddr  }} "

# using linux command to validate IP address
